hs = [1,2,3,4,5,6]
names = [portal,gate];

IDEAS:
    The main idea is the ability to instatiate new chatting rooms,
    that do not last for long and dont keep track of the conversation.
    The maximun time thay can be availabe is 24 hrs or they get deleted
    as soon as everyone leaves the room.
    
----------------------------Architecture------------------------------

    The architecture consits of a nginx server in the front proxying and
    balancing requests on layer 7 (* as a starting strategy, more on this
    at the end of this segment ) to a container server holding a rest api
    with endpoints for managing and creating new chatting rooms.

    world <=> Nginx <=> Rest api <=> rooms

   * Since rooms are containers running a socket server, load balancing
    on layer 7 could be problem, further research on this is necessary
    and we should take into consideration load balancing on layer 4.
    
     ---------        ----------      -------
     | nginx |   <=>  |rest api|  <=> |rooms|
     ---------        ----------      -------
    
    
----------------------------------------------------------------------
Api Documentation:
-----------------------------REST API--------------------------------cd
    This cant be socket related stuff, this commands are to get general
    information at a given time, they cant me used to send messages, files,
    or anything within exinsting chats, this would lose the inmediate 
    feedback chats need.
    They will be used for : Creating new chats
                            Getting information from existing chats
                            Setting up desired behaviours
                            Terminating chats
                            Configuaration
                            Editing
                            
    ENDPOINTS:
    GET api/v1/<room_id> | <room_name>
        Description:
            Responds with object containing all the details about 
            <room_id>, that is name,id,connections, data volume?,
                     date, time alive,expiration date

    GET api/v1/connect/<room_id>
    POST api/v1/room creates new socket (chat) linked to command (2)
        Description:
            Launches a new room cotainer, which conatains the room
            running server.

        Request params:
       -name <name>  : name for the chat room
       -max <max_number> : maximum number of connection allowed
       -expiration_date <hours_to_end | usersLeave> max = 24
                    <usersLeave> => room gets removed when all users leave 

        Responds: 

            Responds with the details/credentials to connect to it.
                name : <room_name>
                expiration : <room_expiration>
                owner_id : <owner_id>
                invite_key : <key other users will use to connect to the room>
                chat: ws://domain.name/<room_id>

-----------------------------END REST API-----------------------------

-----------------------------CLI TOOL---------------------------------
// cli tool? allow developers to test stuff faster 
[] command base : 
        command help => gives list and description of all commands availables
        send -f <path_to_file> command for sending files
        (2) => create room <room_id> : command for creating a new chat room
               -name <name>  : name for the chat room
               -max <max_number> : maximum number of connection allowed
        (3) => get room <room_id | room_name>
                    Responds with object containing all the details about 
                    <room_id>, that is name,id,connections, data volume?,
                             date, time alive,expiration date
-----------------------------END CLI TOOL------------------------------

---------------------------------DEV-----------------------------------
    POST api/v1/room launches new room container
     
--------------------------------END DEV--------------------------------

Research:
    [] api security => keys,etc
    [] cron jobs
    [] uxix sockets
    [] multi threading
